import random
from abc import ABC, abstractmethod
MARK_NONE = 'üîò '
MARK_BUFFER = 'üü° '
MARK_SHIP = 'üîµ '
MARK_KILL = 'üîª '
MARK_MISS = '‚ö´ '


class PosError(Exception):
    pass

class PosOutError(PosError):
    def __str__(self):
        return '–ö–∞—Ä—Ä–∞–º–±–∞! –ó–∞ –ø—Ä–µ–¥–µ–ª—ã –º–æ—Ä—è –Ω–µ —Å—Ç—Ä–µ–ª—è–µ–º! –¢–∞–∫–æ–≤ –º–æ—Ä—Å–∫–æ–π –∑–∞–∫–æ–Ω!'


class PosRepidError(PosError):
    def __str__(self):
        return "–ö–∞–ø–∏—Ç–∞–Ω, –º—ã —É–∂–µ —Å—Ç—Ä–µ–ª—è–ª–∏ –ø–æ —ç—Ç–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º..."


class Block_ship:
    def __init__(self, x: int, y: int) -> None:
        self.x = x
        self.y = y
        # self.check_pos(x, y)

    def __eq__(self, other):
        return self.x == other.x and self.y == other.y

    def __str__(self):
        return f'pos x -> {self.x} \npos y -> {self.y}'

    # def check_pos(self, x, y):
    #     if all([1 <= x <= 6,
    #             1 <= y <= 6]):
    #         self.x = x
    #         self.y = y
    #         print("Ok")
    #     else:
    #         return '–ö–∞—Ä—Ä–∞–º–±–∞! –ö–∞–ø–∏—Ç–∞–Ω, —Ç—ã –Ω–∞–ø—É—Ç–∞–ª —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏ –≤—Å—ë –ø–æ–ª–µ—Ç–µ–ª–æ –≤ –¢–∞—Ä–¢–∞—Ä–∞—Ä—ã!'

class Ship:
    def __init__(self, size: int, block_ship: Block_ship, direction: str):
        self.size = size
        self.start_dot = block_ship
        self.direction = direction
        self.lives = size

        self.ship_blocks = []
        for i in range(self.size):
            pos_x = self.start_dot.x
            pos_y = self.start_dot.y

            if self.direction == '|':
                pos_x += i
            elif self.direction == '-':
                pos_y += i

            self.ship_blocks.append(Block_ship(pos_x, pos_y))

class Board:
    def __init__(self, hid: bool = False, size: int = 6):
        self.count = 0
        self.busy = [] # —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö —Ç–æ—á–µ–∫ –Ω–∞ –¥–æ—Å–∫–µ
        self.ships = [] # —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∞–±–ª–µ–π –Ω–∞ –ø–æ–ª–µ
        self.hid = hid
        self.size_board = size
        self.game_board = self.create_board()

    def get_game_board(self):
        return self.game_board

    def create_board(self):
        field = []
        for i in range(self.size_board):
            row = []
            for j in range(self.size_board):
                row.append(MARK_NONE)
            field.append(row)
        return field

    def get_board(self):
        return self.game_board

    def add_ship(self, ship: Ship):
        for d in ship.ship_blocks:
            if self.out(d) or d in self.busy:
                raise PosError
        for d in ship.ship_blocks:
            self.game_board[d.x][d.y] = MARK_SHIP
            self.busy.append(d)
        self.ships.append(ship)
        self.coutour(ship)

    def coutour(self, ship: Ship, verb: bool = True):
        n = [
            (-1, -1), (-1, 0), (-1, 1),
            (0,-1), (0, 0), (0, 1),
            (1, -1), (1, 0), (1, 1),
        ]
        for d in ship.ship_blocks:
            for dx, dy in n:
                current = Block_ship(d.x + dx, d.y + dy)
                if not(self.out(current)) and current not in self.busy:
                    #self.game_board[current.x][current.y] = MARK_BUFFER
                    if verb:
                        self.game_board[current.x][current.y] = MARK_BUFFER
                    self.busy.append(current)

    def out(self, dot: Block_ship):
        return not((0 <= dot.x < self.size_board) and (0 <= dot.y < self.size_board))

    def attack(self, dot: Block_ship):
        if self.out(dot):
            raise PosOutError

        if dot in self.busy:
            raise PosRepidError

        self.busy.append(dot)

        for ship in self.ships:
            if dot in ship.ship_blocks:
                ship.lives -= 1
                self.game_board[dot.x][dot.y] = MARK_KILL
                if ship.lives == 0:
                    print('–ê—Ä—Ä—Ä–∞! –ö–æ—Ä–∞–±–ª—å —É–Ω–∏—á—Ç–æ–∂–µ–Ω!')
                    self.count += 1
                    self.coutour(ship, verb=True)
                    return False
                else:
                    print('–°—É–¥–Ω–æ –ø–æ–¥–±–∏—Ç–æ!')
                    return True
        self.game_board[dot.x][dot.y] = MARK_MISS
        print('–ù–µ —Å—É–¥—å–±–∞, —Å–Ω–∞—Ä—è–¥ —Ç–µ–ø–µ—Ä—å –ø–æ–∫–æ–∏—Ç—Å—è –Ω–∞ –¥–Ω–µ –º–æ—Ä—è...')
        return False

    def begin(self):
        self.busy = []

    def __str__(self):
        res = '    '
        for i in range(self.size_board):
            res += str(i+1) + '|  '
        res += '\n'
        count = 1
        for i in range(self.size_board):
            res += str(count)+'|'+"|".join(self.game_board[i]) + '|' + '\n'
            count += 1
        if self.hid:
            res = res.replace(MARK_SHIP, MARK_NONE)
            res = res.replace(MARK_BUFFER, MARK_NONE)
        return res

class Player(ABC):
    def __init__(self, board, enemy):
        self.board = board
        self.enemy = enemy

    @abstractmethod
    def ask(self):
        '''–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª—è'''
        pass

    def move(self):
        while True:
            try:
                target = self.ask()
                repeat = self.enemy.attack(target)
                return repeat
            except PosError as e:
                print(e)

class Computer(Player):
    def ask(self):
        dot = Block_ship(random.randint(0, self.board.size_board - 1), random.randint(0, self.board.size_board - 1))
        print(f'–ù–∞—à –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {dot.x} {dot.y}')
        return dot

    def move(self):
        while True:
            try:
                target = self.ask()
                repeat = self.enemy.attack(target)
                return repeat
            except PosError as e:
                pass

class User(Player):
    def ask(self):
        while True:
            coords = input('–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è, –º–æ–π –∫–∞–ø–∏—Ç–∞–Ω: ').split()
            if len(coords) != 2:
                print('–ù—É–∂–Ω—ã 2 –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã')
                continue
            x, y = coords

            try:
                x, y = int(x), int(y)
            except:
                print('–ú–æ–π –∫–∞–ø–∏—Ç–∞–Ω, –≤–≤–µ–¥–∏ —á–∏—Å–ª–∞–º–∏')
                continue
            return Block_ship(x-1, y-1)


class Game:
    def __init__(self, size=6):
        self.start_text()
        self.size_board = size
        player_board = self.player_create_board()
        computer_board = self.enemy_board()
        computer_board.hid = True

        self.player = User(player_board, computer_board)
        self.computer = Computer(computer_board, player_board)

    def player_create_board(self):
        ships = [3, 2, 2, 1, 1, 1, 1]
        game_board = Board(size=self.size_board)
        while len(ships) != 0:
            posX, posY = input('–ö–∞–ø–∏—Ç–∞–Ω, –≤–≤–µ–¥–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ—Ä–∞–±–ª—è: ').split()
            size_ship = input('–°—É–¥–∞—Ä—å, –≤–≤–µ–¥–∏ —Ä–∞–∑–º–µ—Ä –∫–æ—Ä–∞–±–ª—è: ')
            try:
                posX, posY, size_ship = int(posX), int(posY), int(size_ship)
            except:
                print('–ü—Ä–æ—Ç—Ä–∏ –º–æ—Ä–≥–∞–ª–∞, –æ—Ç—Å–∞–≤—å —Ä–æ–º –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑')
                continue
            direction = input('–£–∫–∞–∂–∏ –∫–∞–∫ —Ä–∞—Å–ø–æ–ª–æ–∂–∏—Ç—å –∫–æ—Ä–∞–±–ª—å (| –∏–ª–∏ -): ')
            if '|' not in direction and '-' not in direction:
                print('–ö–∞–ø–∏—Ç–∞–Ω, –ø—Ä–æ—Å–ø–∏—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑...')
                continue
            if size_ship not in ships:
                print('–°—Ç–∞—Ä—ã–π —Ç—ã —á–µ—Ä—Ç, —Ç–∞–∫–æ–π –∫–æ—Ä–∞–±–ª—å –º—ã –Ω–µ –º–æ–∂–µ–º —Å–µ–±–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å! –ü—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑!')
                continue
            ship = Ship(size_ship, Block_ship(posX-1, posY-1), direction)
            try:
                game_board.add_ship(ship)
                ships.remove(size_ship)
                print('–ö–∞—Ä–∞–±–ª—å –Ω–∞ —Å–≤–æ–µ–π –ø–æ–∑–∏—Ü–∏–∏!')
                print(game_board)
            except PosError:
                pass
        game_board.begin()
        return game_board

    def create_board(self):
        ships = [3, 2, 2, 1, 1, 1, 1]
        game_board = Board(size=self.size_board)
        check = 0
        for ship in ships:
            while True:
                check += 1
                if check > 200:
                    return None
                s = Ship(ship, Block_ship(random.randint(0, self.size_board), random.randint(0, self.size_board)), random.choice(['|', '-']))
                try:
                    game_board.add_ship(s)
                    break
                except PosError:
                    pass
        game_board.begin()
        return game_board

    def enemy_board(self):
        board = None
        while board is None:
            board = self.create_board()
        return board

    def game_process(self):
        num = 0
        while True:
            print(' - üè¥‚Äç‚ò†Ô∏è - üè¥‚Äç‚ò†Ô∏è - üè¥‚Äç‚ò†Ô∏è ')
            print('–î–æ—Å–∫–∞ –ö–∞–ø–∏—Ç–∞–Ω–∞:')
            print(self.player.board)
            print(' - ü§ñ - ü§ñ - ü§ñ')
            print('–î–æ—Å–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:')
            print(self.computer.board)
            if num % 2 == 0:
                print('–ö–∞–ø–∏—Ç–∞–Ω —Ä—É–ª–∏—Ç')
                game_is_on = self.player.move()
            else:
                game_is_on = self.computer.move()
            if game_is_on:
                num -= 1

            if self.computer.board.count > 6:
                print('–¢—ã—Å—è—á–∞ —á–µ—Ä—Ç–µ–π! –ö–∞–ø—Ç–∞–Ω –æ–¥–æ–ª–µ–ª –º–æ—Ä—Å–∫–∏—Ö –¥—ä—è–≤–æ–ª–æ–≤!')
                break
            if self.player.board.count > 6:
                print('–ü–∞–ª—É–Ω–¥—Ä–∞–∞–∞! –ú—ã —Ç–æ–Ω–µ–º!')
                break

            num += 1

    def start_text(self):
        hello_text = '''
\t–ö–∞—Ä—Ä—Ä–∞–º–±–∞!
–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –º–æ–π –∫–∞–ø–∏—Ç–∞–Ω!
–¢—ã –≥–æ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ø—É—Ç—å, –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –º–æ—Ä—Å–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —Å –æ–≥–ª—É—à–∞—é—â–∏–º –∑–∞–ª–ø–æ–º –ø—É—à–µ–∫?
–ö–æ–Ω–µ—á–Ω–æ –≥–æ—Ç–æ–≤! –ö —á–µ–º—É —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã, —è–∫–æ—Ä—å –º–Ω–µ –ø–æ–¥ –ø–∞–ª—É–±—É!
–ó–∞–ø–æ–º–Ω–∏, –º–æ—Ä—Å–∫–æ–π —Ç—ã —á—ë—Ä—Ç, –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—ã –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
—à–∏—Ä–æ—Ç—É –∏ –¥–æ–ª–≥–æ—Ç—É, –±–µ–∑ –Ω–∏—Ö –º—ã –±–µ—Å—Å–∏–ª—å–Ω—ã.
–ü–æ–º–Ω–∏ –∂–µ, —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–¥–∞–µ—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –•,
–∞ –ø–æ—Ç–æ–º —É–∂–µ Y, –∏ –¥–∞ –ø–æ—Ü–µ–ª—É–µ—Ç –º–µ–Ω—è —Ä—É—Å–∞–ª–∫–∞, –≤—Å–µ —ç—Ç–∏ –º–æ—Ä—Å–∫–∏–µ –∫—Ä—ã—Å—ã –ø–æ–π–¥—É—Ç –∫–æ –¥–Ω—é.
–¢–∞—â–∏—Ç–µ —Ä–æ–º—É, –±–µ–∑–¥–µ–ª—å–Ω–∏–∫–∏, –ö–∞–ø–∏—Ç–∞–Ω —É —à—Ç—É—Ä–≤–∞–ª–∞!\n'''
        print(hello_text)


g = Game()
g.game_process()


